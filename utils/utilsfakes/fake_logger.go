// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"
	"thwInventoryMerge/utils"
)

type FakeLogger struct {
	ErrorStub        func(string)
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		arg1 string
	}
	FatalStub        func(string)
	fatalMutex       sync.RWMutex
	fatalArgsForCall []struct {
		arg1 string
	}
	InfoStub        func(string)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		arg1 string
	}
	InfoIndentedStub        func(string)
	infoIndentedMutex       sync.RWMutex
	infoIndentedArgsForCall []struct {
		arg1 string
	}
	WarnStub        func(string)
	warnMutex       sync.RWMutex
	warnArgsForCall []struct {
		arg1 string
	}
	WarnIndentedStub        func(string)
	warnIndentedMutex       sync.RWMutex
	warnIndentedArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogger) Error(arg1 string) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ErrorStub
	fake.recordInvocation("Error", []interface{}{arg1})
	fake.errorMutex.Unlock()
	if stub != nil {
		fake.ErrorStub(arg1)
	}
}

func (fake *FakeLogger) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeLogger) ErrorCalls(stub func(string)) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = stub
}

func (fake *FakeLogger) ErrorArgsForCall(i int) string {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	argsForCall := fake.errorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogger) Fatal(arg1 string) {
	fake.fatalMutex.Lock()
	fake.fatalArgsForCall = append(fake.fatalArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FatalStub
	fake.recordInvocation("Fatal", []interface{}{arg1})
	fake.fatalMutex.Unlock()
	if stub != nil {
		fake.FatalStub(arg1)
	}
}

func (fake *FakeLogger) FatalCallCount() int {
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	return len(fake.fatalArgsForCall)
}

func (fake *FakeLogger) FatalCalls(stub func(string)) {
	fake.fatalMutex.Lock()
	defer fake.fatalMutex.Unlock()
	fake.FatalStub = stub
}

func (fake *FakeLogger) FatalArgsForCall(i int) string {
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	argsForCall := fake.fatalArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogger) Info(arg1 string) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.InfoStub
	fake.recordInvocation("Info", []interface{}{arg1})
	fake.infoMutex.Unlock()
	if stub != nil {
		fake.InfoStub(arg1)
	}
}

func (fake *FakeLogger) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeLogger) InfoCalls(stub func(string)) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = stub
}

func (fake *FakeLogger) InfoArgsForCall(i int) string {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	argsForCall := fake.infoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogger) InfoIndented(arg1 string) {
	fake.infoIndentedMutex.Lock()
	fake.infoIndentedArgsForCall = append(fake.infoIndentedArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.InfoIndentedStub
	fake.recordInvocation("InfoIndented", []interface{}{arg1})
	fake.infoIndentedMutex.Unlock()
	if stub != nil {
		fake.InfoIndentedStub(arg1)
	}
}

func (fake *FakeLogger) InfoIndentedCallCount() int {
	fake.infoIndentedMutex.RLock()
	defer fake.infoIndentedMutex.RUnlock()
	return len(fake.infoIndentedArgsForCall)
}

func (fake *FakeLogger) InfoIndentedCalls(stub func(string)) {
	fake.infoIndentedMutex.Lock()
	defer fake.infoIndentedMutex.Unlock()
	fake.InfoIndentedStub = stub
}

func (fake *FakeLogger) InfoIndentedArgsForCall(i int) string {
	fake.infoIndentedMutex.RLock()
	defer fake.infoIndentedMutex.RUnlock()
	argsForCall := fake.infoIndentedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogger) Warn(arg1 string) {
	fake.warnMutex.Lock()
	fake.warnArgsForCall = append(fake.warnArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.WarnStub
	fake.recordInvocation("Warn", []interface{}{arg1})
	fake.warnMutex.Unlock()
	if stub != nil {
		fake.WarnStub(arg1)
	}
}

func (fake *FakeLogger) WarnCallCount() int {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	return len(fake.warnArgsForCall)
}

func (fake *FakeLogger) WarnCalls(stub func(string)) {
	fake.warnMutex.Lock()
	defer fake.warnMutex.Unlock()
	fake.WarnStub = stub
}

func (fake *FakeLogger) WarnArgsForCall(i int) string {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	argsForCall := fake.warnArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogger) WarnIndented(arg1 string) {
	fake.warnIndentedMutex.Lock()
	fake.warnIndentedArgsForCall = append(fake.warnIndentedArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.WarnIndentedStub
	fake.recordInvocation("WarnIndented", []interface{}{arg1})
	fake.warnIndentedMutex.Unlock()
	if stub != nil {
		fake.WarnIndentedStub(arg1)
	}
}

func (fake *FakeLogger) WarnIndentedCallCount() int {
	fake.warnIndentedMutex.RLock()
	defer fake.warnIndentedMutex.RUnlock()
	return len(fake.warnIndentedArgsForCall)
}

func (fake *FakeLogger) WarnIndentedCalls(stub func(string)) {
	fake.warnIndentedMutex.Lock()
	defer fake.warnIndentedMutex.Unlock()
	fake.WarnIndentedStub = stub
}

func (fake *FakeLogger) WarnIndentedArgsForCall(i int) string {
	fake.warnIndentedMutex.RLock()
	defer fake.warnIndentedMutex.RUnlock()
	argsForCall := fake.warnIndentedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.infoIndentedMutex.RLock()
	defer fake.infoIndentedMutex.RUnlock()
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	fake.warnIndentedMutex.RLock()
	defer fake.warnIndentedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.Logger = new(FakeLogger)
